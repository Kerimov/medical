generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./prisma/dev.db"
}

enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  role      UserRole  @default(PATIENT)
  createdAt DateTime  @default(now())
  documents Document[]
  analyses  Analysis[]
  reminders Reminder[]
  reminderPreference ReminderPreference?
  recommendations Recommendation[]
  doctorProfile DoctorProfile?
  patientRecords PatientRecord[]
  healthDiaryEntries HealthDiaryEntry[]
  diaryTags         DiaryTag[]
}

model DoctorProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  licenseNumber     String   @unique
  specialization    String
  experience        Int      // years
  education         String
  certifications    String?
  phone             String?
  clinic            String?
  address           String?
  workingHours      Json?    // {"monday": {"start": "09:00", "end": "18:00"}, ...}
  consultationFee   Float?
  isVerified        Boolean  @default(false)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  patientRecords    PatientRecord[]
  medicalNotes      MedicalNote[]
  prescriptions     Prescription[]
  appointments      Appointment[]
}

model PatientRecord {
  id              String   @id @default(cuid())
  doctorId        String
  doctor          DoctorProfile @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patientId       String
  patient         User     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  recordType      String   // "consultation", "follow_up", "emergency", "routine"
  diagnosis       String?
  symptoms        String?
  treatment       String?
  medications     Json?    // [{"name": "Medication", "dosage": "500mg", "frequency": "2x daily"}]
  nextVisit       DateTime?
  status          String   @default("active") // "active", "completed", "cancelled"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  medicalNotes    MedicalNote[]
  prescriptions   Prescription[]
}

model MedicalNote {
  id              String   @id @default(cuid())
  doctorId        String
  doctor          DoctorProfile @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patientRecordId String?
  patientRecord   PatientRecord? @relation(fields: [patientRecordId], references: [id], onDelete: Cascade)
  title           String
  content         String
  noteType        String   // "observation", "recommendation", "warning", "follow_up"
  priority        String   @default("normal") // "low", "normal", "high", "urgent"
  isPrivate       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Prescription {
  id              String   @id @default(cuid())
  doctorId        String
  doctor          DoctorProfile @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patientRecordId String?
  patientRecord   PatientRecord? @relation(fields: [patientRecordId], references: [id], onDelete: Cascade)
  medication      String
  dosage          String
  frequency       String
  duration        String
  instructions    String?
  isActive        Boolean  @default(true)
  prescribedAt    DateTime @default(now())
  expiresAt       DateTime?
}

model Appointment {
  id              String   @id @default(cuid())
  doctorId        String
  doctor          DoctorProfile @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patientId       String
  patientName     String
  patientPhone    String?
  patientEmail    String?
  appointmentType String   // "consultation", "follow_up", "emergency", "routine"
  scheduledAt     DateTime
  duration        Int      @default(30) // minutes
  status          String   @default("scheduled") // "scheduled", "confirmed", "completed", "cancelled", "no_show"
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Document {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileName      String
  fileType      String
  fileSize      Int
  fileUrl       String
  uploadDate    DateTime  @default(now())
  parsed        Boolean   @default(false)
  studyDate     DateTime?
  studyType     String?
  laboratory    String?
  doctor        String?
  findings      String?
  rawText       String?
  ocrConfidence Float?
  tags          String?
  category      String?
  notes         String?
  indicators    Json?
  analyses      Analysis[]
  reminders     Reminder[]
}

model Analysis {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentId  String?  // Связанный документ (опционально)
  document    Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)
  title       String
  type        String   // Тип анализа (общий анализ крови, биохимия, и т.д.)
  date        DateTime
  laboratory  String?
  doctor      String?
  results     String   // JSON с результатами анализов
  normalRange String?  // Нормальные значения
  status      String   @default("normal") // normal, abnormal, critical
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reminders   Reminder[]
  recommendations Recommendation[]
}

/// Напоминания и планирование
enum ReminderRecurrence {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ReminderChannel {
  EMAIL
  PUSH
  SMS
}

enum DeliveryStatus {
  PENDING
  SENT
  FAILED
}

model Reminder {
  id          String            @id @default(cuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  analysisId  String?
  analysis    Analysis?         @relation(fields: [analysisId], references: [id], onDelete: SetNull)
  documentId  String?
  document    Document?         @relation(fields: [documentId], references: [id], onDelete: SetNull)
  title       String
  description String?
  dueAt       DateTime
  recurrence  ReminderRecurrence @default(NONE)
  channels    Json // массив каналов в виде JSON: ["EMAIL","PUSH","SMS"]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  deliveries  ReminderDelivery[]
}

model ReminderPreference {
  id        String  @id @default(cuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     Boolean @default(true)
  push      Boolean @default(true)
  sms       Boolean @default(false)
  timezone  String  @default("Europe/Moscow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReminderDelivery {
  id         String          @id @default(cuid())
  reminderId String
  reminder   Reminder        @relation(fields: [reminderId], references: [id], onDelete: Cascade)
  channel    ReminderChannel
  status     DeliveryStatus  @default(PENDING)
  sentAt     DateTime?
  error      String?
  createdAt  DateTime        @default(now())
}

/// Маркетплейс и персонализированные предложения
enum CompanyType {
  CLINIC
  LABORATORY
  PHARMACY
  HEALTH_STORE
  FITNESS_CENTER
  NUTRITIONIST
  OTHER
}

enum RecommendationType {
  ANALYSIS
  SUPPLEMENT
  SERVICE
  ARTICLE
  PRODUCT
}

enum RecommendationStatus {
  ACTIVE
  VIEWED
  CLICKED
  PURCHASED
  DISMISSED
}

model Company {
  id          String      @id @default(cuid())
  name        String
  type        CompanyType
  description String?
  address     String?
  city        String?
  phone       String?
  email       String?
  website     String?
  rating      Float?      @default(0)
  reviewCount Int         @default(0)
  imageUrl    String?
  services    Json?       // JSON массив услуг
  workingHours Json?      // JSON с рабочими часами
  coordinates Json?       // JSON с координатами {lat, lng}
  isVerified  Boolean     @default(false)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  products    Product[]
  recommendations Recommendation[]
}

model Product {
  id          String    @id @default(cuid())
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name        String
  description String?
  category    String?
  price       Float?
  currency    String    @default("RUB")
  imageUrl    String?
  isAvailable Boolean   @default(true)
  tags        Json?     // JSON массив тегов
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  recommendations Recommendation[]
}

model Recommendation {
  id              String             @id @default(cuid())
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  type            RecommendationType
  title           String
  description     String?
  reason          String?            // Причина рекомендации (например, "Низкий уровень витамина D")
  priority        Int                @default(1) // 1-5, где 5 - высший приоритет
  status          RecommendationStatus @default(ACTIVE)
  companyId       String?
  company         Company?           @relation(fields: [companyId], references: [id], onDelete: SetNull)
  productId       String?
  product         Product?           @relation(fields: [productId], references: [id], onDelete: SetNull)
  analysisId      String?            // Связанный анализ, который вызвал рекомендацию
  analysis        Analysis?          @relation(fields: [analysisId], references: [id], onDelete: SetNull)
  metadata        Json?              // Дополнительные данные
  expiresAt       DateTime?          // Дата истечения рекомендации
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  interactions    RecommendationInteraction[]
}

model RecommendationInteraction {
  id               String         @id @default(cuid())
  recommendationId String
  recommendation   Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)
  action           String         // "view", "click", "purchase", "dismiss"
  metadata         Json?          // Дополнительные данные о взаимодействии
  createdAt        DateTime       @default(now())
}

/// База знаний - медицинские справочники
enum MethodologyType {
  MINZDRAV_RF   // Минздрав РФ
  US_STANDARDS   // Американские стандарты (CDC, NIH)
  EU_STANDARDS   // Европейские стандарты (ESC, EASL)
  WHO            // Всемирная организация здравоохранения
  OTHER
}

model StudyType {
  id              String      @id @default(cuid())
  name            String      // Название исследования
  nameEn          String?     // Английское название
  code            String?     @unique // Код исследования (например, LOINC код)
  category        String      // Категория (клиническая химия, гематология, и т.д.)
  description     String?     // Описание исследования
  clinicalSignificance String? // Клиническое значение
  preparation     String?     // Подготовка к исследованию
  biomaterial     String?     // Биоматериал (кровь, моча, и т.д.)
  sources         Json?       // Ссылки на источники (UpToDate, MSD, Medscape, PubMed и др.)
  lastUpdated     DateTime?   // Дата последнего обновления из источников
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  indicators      Indicator[]
}

model Indicator {
  id                   String          @id @default(cuid())
  studyTypeId          String
  studyType            StudyType       @relation(fields: [studyTypeId], references: [id], onDelete: Cascade)
  name                 String          // Название показателя
  nameEn               String?         // Английское название
  code                 String?         // Код показателя (например, LOINC)
  shortName            String?         // Краткое название/аббревиатура
  unit                 String          // Единица измерения (мг/дл, ммоль/л, и т.д.)
  description          String?         // Описание показателя
  clinicalSignificance String?         // Клиническое значение
  increasedMeaning     String?         // Что означает повышение
  decreasedMeaning     String?         // Что означает понижение
  relatedConditions    Json?           // Связанные состояния/заболевания
  synonyms             Json?           // Синонимы и альтернативные названия
  sources              Json?           // Ссылки на источники (UpToDate, MSD, Medscape, PubMed и др.)
  lastUpdated          DateTime?       // Дата последнего обновления из источников
  maintenanceRecommendations String?   // Рекомендации для поддержания в норме
  improvementRecommendations String?   // Рекомендации для улучшения показателей
  isActive             Boolean         @default(true)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  referenceRanges      ReferenceRange[]
}

model Methodology {
  id              String          @id @default(cuid())
  name            String          // Название методологии
  type            MethodologyType
  description     String?         // Описание методологии
  organization    String?         // Организация (CDC, NIH, ESC, и т.д.)
  country         String?         // Страна
  version         String?         // Версия стандарта
  effectiveFrom   DateTime?       // Дата вступления в силу
  source          String?         // Источник/ссылка на документ
  sources         Json?           // Дополнительные ссылки на источники
  lastUpdated     DateTime?       // Дата последнего обновления из источников
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  referenceRanges ReferenceRange[]
}

model ReferenceRange {
  id            String       @id @default(cuid())
  indicatorId   String
  indicator     Indicator    @relation(fields: [indicatorId], references: [id], onDelete: Cascade)
  methodologyId String
  methodology   Methodology  @relation(fields: [methodologyId], references: [id], onDelete: Cascade)
  ageGroupMin   Float?       // Минимальный возраст (в годах)
  ageGroupMax   Float?       // Максимальный возраст (в годах)
  gender        String?      // Пол (male, female, all)
  minValue      Float?       // Минимальное значение нормы
  maxValue      Float?       // Максимальное значение нормы
  optimalMin    Float?       // Оптимальное минимальное значение
  optimalMax    Float?       // Оптимальное максимальное значение
  criticalLow   Float?       // Критически низкое значение
  criticalHigh  Float?       // Критически высокое значение
  note          String?      // Дополнительная информация
  conditions    Json?        // Особые условия применения
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  @@unique([indicatorId, methodologyId, gender, ageGroupMin, ageGroupMax])
}

/// Дневник здоровья
model HealthDiaryEntry {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  entryDate   DateTime // Дата/время записи

  // Показатели самочувствия
  mood        Int?     // 1-5
  painScore   Int?     // 0-10
  sleepHours  Float?
  steps       Int?
  temperature Float?
  weight      Float?
  systolic    Int?
  diastolic   Int?
  pulse       Int?

  symptoms    String?  // свободный текст
  notes       String?

  tags        DiaryTagOnEntry[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId, entryDate])
}

model DiaryTag {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  color     String?  // hex

  entries   DiaryTagOnEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
}

model DiaryTagOnEntry {
  entryId String
  tagId   String

  entry   HealthDiaryEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  tag     DiaryTag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([entryId, tagId])
}