generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./prisma/dev.db"
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  createdAt DateTime  @default(now())
  documents Document[]
  analyses  Analysis[]
  reminders Reminder[]
  reminderPreference ReminderPreference?
  recommendations Recommendation[]
}

model Document {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileName      String
  fileType      String
  fileSize      Int
  fileUrl       String
  uploadDate    DateTime  @default(now())
  parsed        Boolean   @default(false)
  studyDate     DateTime?
  studyType     String?
  laboratory    String?
  doctor        String?
  findings      String?
  rawText       String?
  ocrConfidence Float?
  tags          String?
  category      String?
  notes         String?
  indicators    Json?
  analyses      Analysis[]
  reminders     Reminder[]
}

model Analysis {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentId  String?  // Связанный документ (опционально)
  document    Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)
  title       String
  type        String   // Тип анализа (общий анализ крови, биохимия, и т.д.)
  date        DateTime
  laboratory  String?
  doctor      String?
  results     String   // JSON с результатами анализов
  normalRange String?  // Нормальные значения
  status      String   @default("normal") // normal, abnormal, critical
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reminders   Reminder[]
  recommendations Recommendation[]
}

/// Напоминания и планирование
enum ReminderRecurrence {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ReminderChannel {
  EMAIL
  PUSH
  SMS
}

enum DeliveryStatus {
  PENDING
  SENT
  FAILED
}

model Reminder {
  id          String            @id @default(cuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  analysisId  String?
  analysis    Analysis?         @relation(fields: [analysisId], references: [id], onDelete: SetNull)
  documentId  String?
  document    Document?         @relation(fields: [documentId], references: [id], onDelete: SetNull)
  title       String
  description String?
  dueAt       DateTime
  recurrence  ReminderRecurrence @default(NONE)
  channels    Json // массив каналов в виде JSON: ["EMAIL","PUSH","SMS"]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  deliveries  ReminderDelivery[]
}

model ReminderPreference {
  id        String  @id @default(cuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     Boolean @default(true)
  push      Boolean @default(true)
  sms       Boolean @default(false)
  timezone  String  @default("Europe/Moscow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReminderDelivery {
  id         String          @id @default(cuid())
  reminderId String
  reminder   Reminder        @relation(fields: [reminderId], references: [id], onDelete: Cascade)
  channel    ReminderChannel
  status     DeliveryStatus  @default(PENDING)
  sentAt     DateTime?
  error      String?
  createdAt  DateTime        @default(now())
}

/// Маркетплейс и персонализированные предложения
enum CompanyType {
  CLINIC
  LABORATORY
  PHARMACY
  HEALTH_STORE
  FITNESS_CENTER
  NUTRITIONIST
  OTHER
}

enum RecommendationType {
  ANALYSIS
  SUPPLEMENT
  SERVICE
  ARTICLE
  PRODUCT
}

enum RecommendationStatus {
  ACTIVE
  VIEWED
  CLICKED
  PURCHASED
  DISMISSED
}

model Company {
  id          String      @id @default(cuid())
  name        String
  type        CompanyType
  description String?
  address     String?
  city        String?
  phone       String?
  email       String?
  website     String?
  rating      Float?      @default(0)
  reviewCount Int         @default(0)
  imageUrl    String?
  services    Json?       // JSON массив услуг
  workingHours Json?      // JSON с рабочими часами
  coordinates Json?       // JSON с координатами {lat, lng}
  isVerified  Boolean     @default(false)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  products    Product[]
  recommendations Recommendation[]
}

model Product {
  id          String    @id @default(cuid())
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name        String
  description String?
  category    String?
  price       Float?
  currency    String    @default("RUB")
  imageUrl    String?
  isAvailable Boolean   @default(true)
  tags        Json?     // JSON массив тегов
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  recommendations Recommendation[]
}

model Recommendation {
  id              String             @id @default(cuid())
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  type            RecommendationType
  title           String
  description     String?
  reason          String?            // Причина рекомендации (например, "Низкий уровень витамина D")
  priority        Int                @default(1) // 1-5, где 5 - высший приоритет
  status          RecommendationStatus @default(ACTIVE)
  companyId       String?
  company         Company?           @relation(fields: [companyId], references: [id], onDelete: SetNull)
  productId       String?
  product         Product?           @relation(fields: [productId], references: [id], onDelete: SetNull)
  analysisId      String?            // Связанный анализ, который вызвал рекомендацию
  analysis        Analysis?          @relation(fields: [analysisId], references: [id], onDelete: SetNull)
  metadata        Json?              // Дополнительные данные
  expiresAt       DateTime?          // Дата истечения рекомендации
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  interactions    RecommendationInteraction[]
}

model RecommendationInteraction {
  id               String         @id @default(cuid())
  recommendationId String
  recommendation   Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)
  action           String         // "view", "click", "purchase", "dismiss"
  metadata         Json?          // Дополнительные данные о взаимодействии
  createdAt        DateTime       @default(now())
}