import { NextRequest, NextResponse } from 'next/server'
import { DocumentCategory } from '@/lib/documents'
import { prisma } from '@/lib/db'
import { verifyToken } from '@/lib/auth'
import { parse as parseCookies } from 'cookie'

// –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö (10 MB)
const MAX_FILE_SIZE = 10 * 1024 * 1024

// –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
const ALLOWED_TYPES = [
  'application/pdf',
  'image/jpeg',
  'image/jpg',
  'image/png',
  'application/dicom',
  'text/csv',
  'text/plain'
]

export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const cookieHeader = request.headers.get('cookie')
    const cookies = cookieHeader ? parseCookies(cookieHeader) : {}
    const token = cookies.token

    if (!token) {
      return NextResponse.json(
        { error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' },
        { status: 401 }
      )
    }

    const payload = verifyToken(token)
    if (!payload) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' },
        { status: 401 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    const formData = await request.formData()
    const file = formData.get('file') as File

    if (!file) {
      return NextResponse.json(
        { error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    if (file.size > MAX_FILE_SIZE) {
      return NextResponse.json(
        { error: `–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç ${MAX_FILE_SIZE / 1024 / 1024} –ú–ë` },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
    if (!ALLOWED_TYPES.includes(file.type)) {
      return NextResponse.json(
        { error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞' },
        { status: 400 }
      )
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
    const bytes = await file.arrayBuffer()
    const buffer = Buffer.from(bytes)
    const base64 = buffer.toString('base64')
    const fileUrl = `data:${file.type};base64,${base64}`

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
    let category: DocumentCategory = DocumentCategory.OTHER
    if (file.type.includes('image') || file.type.includes('dicom')) {
      category = DocumentCategory.IMAGING
    }

    // –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    const document = await prisma.document.create({
      data: {
        userId: payload.userId,
        fileName: file.name,
        fileType: file.type,
        fileSize: file.size,
        fileUrl,
        parsed: false,
        category
      }
    })

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É OCR (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
    processDocumentOCR(document.id).catch(err => {
      console.error('OCR processing error:', err)
    })

    return NextResponse.json({
      message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
      document: {
        id: document.id,
        fileName: document.fileName,
        fileType: document.fileType,
        fileSize: document.fileSize,
        uploadDate: document.uploadDate
      }
    })

  } catch (error) {
    console.error('Upload error:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞' },
      { status: 500 }
    )
  }
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ OCR
async function processDocumentOCR(documentId: string) {
  console.log(`[OCR] Starting processing for document ${documentId}`)
  
  const document = await prisma.document.findUnique({ where: { id: documentId } })
  if (!document) return

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ PDF
    const isImage = document.fileType.includes('image')
    const isPDF = document.fileType.includes('pdf')
    
    if (!isImage && !isPDF) {
      console.log(`[OCR] Skipping OCR for file type: ${document.fileType}`)
      return
    }

    // –†–µ–∞–ª—å–Ω—ã–π OCR —á–µ—Ä–µ–∑ OCR.space ‚úÖ –†–ê–ë–û–¢–ê–ï–¢!
    const { performOCRSpace } = await import('@/lib/ocr-space')
    const { parseMedicalData } = await import('@/lib/ocr')
    const { parseWithAI, getAIConfig } = await import('@/lib/ai-medical-parser')
    
    try {
      console.log('[OCR] Starting OCR.space processing...')
      const ocrResult = await performOCRSpace(document.fileUrl)
      
      // –£–ú–ù–´–ô –ü–ê–†–°–ò–ù–ì: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º AI, –ø–æ—Ç–æ–º fallback –Ω–∞ regex
      let medicalData
      const aiConfig = getAIConfig()
      
      if (aiConfig) {
        // ü§ñ AI-–ü–ê–†–°–ï–†: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª—é–±—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        try {
          console.log(`[OCR] Using AI parser (${aiConfig.provider})...`)
          medicalData = await parseWithAI(ocrResult.text, aiConfig)
          console.log(`[OCR] ‚úÖ AI parsing successful! Extracted ${medicalData.indicators.length} indicators`)
        } catch (aiError) {
          console.warn('[OCR] ‚ö†Ô∏è AI parsing failed, falling back to regex parser:', aiError)
          medicalData = parseMedicalData(ocrResult.text)
        }
      } else {
        // üìù REGEX-–ü–ê–†–°–ï–†: –ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏)
        console.log('[OCR] No AI config found, using regex parser')
        console.log('[OCR] üí° Tip: Add OPENAI_API_KEY to .env.local for universal parsing')
        medicalData = parseMedicalData(ocrResult.text)
      }
      
      await prisma.document.update({
        where: { id: documentId },
        data: {
          rawText: ocrResult.text,
          ocrConfidence: ocrResult.confidence,
          studyType: medicalData.studyType,
          studyDate: medicalData.studyDate,
          laboratory: medicalData.laboratory,
          doctor: medicalData.doctor,
          findings: medicalData.findings,
          parsed: true
        }
      })
      
      console.log(`[OCR] OCR.space completed successfully for document ${documentId}`)
      return
    } catch (error) {
      console.error('[OCR] OCR.space failed, falling back to mock data:', error)
      // –ï—Å–ª–∏ OCR –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
    }
    
    // –í–ê–†–ò–ê–ù–¢ 2: Mock –¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ OCR –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
    await new Promise(resolve => setTimeout(resolve, 2000)) // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ (–Ω–æ—Ä–º–∞ –∏–ª–∏ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏)
    const variant = Math.random()
    const hasDeviations = variant > 0.5 // 50% —à–∞–Ω—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ mock –¥–∞–Ω–Ω—ã–µ - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ —Å 15 –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
    const mockData = {
      rawText: `–†–ê–ó–í–ï–†–ù–£–¢–´–ô –ê–ù–ê–õ–ò–ó –ö–†–û–í–ò
      
–î–∞—Ç–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: 15.10.2024
–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è: –ú–µ–¥–õ–∞–± –¶–µ–Ω—Ç—Ä, –≥. –ú–æ—Å–∫–≤–∞
–í—Ä–∞—á-–ª–∞–±–æ—Ä–∞–Ω—Ç: –ò–≤–∞–Ω–æ–≤ –ò.–ò.
–ü–∞—Ü–∏–µ–Ω—Ç: ${document.fileName.replace('.pdf', '')}

–û–ë–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:

–ì–µ–º–æ–≥–ª–æ–±–∏–Ω (HGB): 145 –≥/–ª
–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 120-160 –≥/–ª

–≠—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã (RBC): 4.5 –º–ª–Ω/–º–∫–ª  
–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 4.0-5.5 –º–ª–Ω/–º–∫–ª

–ì–µ–º–∞—Ç–æ–∫—Ä–∏—Ç (HCT): 42 %
–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 36-48 %

–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º —ç—Ä–∏—Ç—Ä–æ—Ü–∏—Ç–∞ (MCV): 88 —Ñ–ª
–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 80-100 —Ñ–ª

–°—Ä–µ–¥–Ω–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ Hb –≤ —ç—Ä–∏—Ç—Ä–æ—Ü–∏—Ç–µ (MCH): 30 –ø–≥
–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 27-34 –ø–≥

–õ–ï–ô–ö–û–¶–ò–¢–ê–†–ù–ê–Ø –§–û–†–ú–£–õ–ê:

–õ–µ–π–∫–æ—Ü–∏—Ç—ã (WBC): 6.2 —Ç—ã—Å/–º–∫–ª
–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 4.0-9.0 —Ç—ã—Å/–º–∫–ª

–ù–µ–π—Ç—Ä–æ—Ñ–∏–ª—ã (—Å–µ–≥–º–µ–Ω—Ç–æ—è–¥–µ—Ä–Ω—ã–µ): 58 %
–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 47-72 %

–õ–∏–º—Ñ–æ—Ü–∏—Ç—ã: 32 %
–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 19-37 %

–ú–æ–Ω–æ—Ü–∏—Ç—ã: 7 %
–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 3-11 %

–≠–æ–∑–∏–Ω–æ—Ñ–∏–ª—ã: 2 %
–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 0.5-5 %

–ë–∞–∑–æ—Ñ–∏–ª—ã: 1 %
–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 0-1 %

–°–ò–°–¢–ï–ú–ê –°–í–ï–†–¢–´–í–ê–ù–ò–Ø:

–¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã (PLT): 280 —Ç—ã—Å/–º–∫–ª
–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 150-400 —Ç—ã—Å/–º–∫–ª

–°–û–≠: 8 –º–º/—á
–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 0-15 –º–º/—á

–ë–ò–û–•–ò–ú–ò–ß–ï–°–ö–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:

–ì–ª—é–∫–æ–∑–∞: 4.8 –º–º–æ–ª—å/–ª
–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 3.3-5.5 –º–º–æ–ª—å/–ª

–û–±—â–∏–π –±–µ–ª–æ–∫: 72 –≥/–ª
–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 64-83 –≥/–ª

–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:
${hasDeviations 
  ? '–í—ã—è–≤–ª–µ–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–æ—Ä–º—ã:\n- –ê–Ω–µ–º–∏—è –ª–µ–≥–∫–æ–π —Å—Ç–µ–ø–µ–Ω–∏ (—Å–Ω–∏–∂–µ–Ω–∏–µ –≥–µ–º–æ–≥–ª–æ–±–∏–Ω–∞, —ç—Ä–∏—Ç—Ä–æ—Ü–∏—Ç–æ–≤, –≥–µ–º–∞—Ç–æ–∫—Ä–∏—Ç–∞)\n- –õ–µ–π–∫–æ—Ü–∏—Ç–æ–∑ —Å –Ω–µ–π—Ç—Ä–æ—Ñ–∏–ª–µ–∑–æ–º (–≤–æ–∑–º–æ–∂–µ–Ω –≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å)\n- –ü–æ–≤—ã—à–µ–Ω–∏–µ –°–û–≠ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤–æ—Å–ø–∞–ª–µ–Ω–∏–µ)\n- –ü–æ–≤—ã—à–µ–Ω–∏–µ –≥–ª—é–∫–æ–∑—ã (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Ç—Ä–æ–ª—å, –∏—Å–∫–ª—é—á–∏—Ç—å –¥–∏–∞–±–µ—Ç)\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∞.' 
  : '–í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞, –∞–Ω–µ–º–∏–∏ –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤.'}`,
      ocrConfidence: 0.96,
      studyType: '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏',
      studyDate: new Date('2024-10-15'),
      laboratory: '–ú–µ–¥–õ–∞–± –¶–µ–Ω—Ç—Ä, –≥. –ú–æ—Å–∫–≤–∞',
      doctor: '–ò–≤–∞–Ω–æ–≤ –ò.–ò.',
      findings: hasDeviations 
        ? '–í—ã—è–≤–ª–µ–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–æ—Ä–º—ã: –∞–Ω–µ–º–∏—è –ª–µ–≥–∫–æ–π —Å—Ç–µ–ø–µ–Ω–∏, –ª–µ–π–∫–æ—Ü–∏—Ç–æ–∑ —Å –Ω–µ–π—Ç—Ä–æ—Ñ–∏–ª–µ–∑–æ–º (–≤–æ–∑–º–æ–∂–µ–Ω –≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å), –ø–æ–≤—ã—à–µ–Ω–∏–µ –°–û–≠, –ø–æ–≤—ã—à–µ–Ω–∏–µ –≥–ª—é–∫–æ–∑—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∞.'
        : '–í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞, –∞–Ω–µ–º–∏–∏ –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤.',
      parsed: true,
      indicators: hasDeviations ? [
        // –° –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏ - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        {
          name: '–ì–µ–º–æ–≥–ª–æ–±–∏–Ω (HGB)',
          value: 105, // –ü–û–ù–ò–ñ–ï–ù
          unit: '–≥/–ª',
          referenceMin: 120,
          referenceMax: 160,
          isNormal: false
        },
        {
          name: '–≠—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã (RBC)',
          value: 3.5, // –ü–û–ù–ò–ñ–ï–ù–´
          unit: '–º–ª–Ω/–º–∫–ª',
          referenceMin: 4.0,
          referenceMax: 5.5,
          isNormal: false
        },
        {
          name: '–ì–µ–º–∞—Ç–æ–∫—Ä–∏—Ç (HCT)',
          value: 33, // –ü–û–ù–ò–ñ–ï–ù
          unit: '%',
          referenceMin: 36,
          referenceMax: 48,
          isNormal: false
        },
        {
          name: '–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º —ç—Ä–∏—Ç—Ä–æ—Ü–∏—Ç–∞ (MCV)',
          value: 88,
          unit: '—Ñ–ª',
          referenceMin: 80,
          referenceMax: 100,
          isNormal: true
        },
        {
          name: '–°—Ä–µ–¥–Ω–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ Hb (MCH)',
          value: 30,
          unit: '–ø–≥',
          referenceMin: 27,
          referenceMax: 34,
          isNormal: true
        },
        {
          name: '–õ–µ–π–∫–æ—Ü–∏—Ç—ã (WBC)',
          value: 11.5, // –ü–û–í–´–®–ï–ù–´
          unit: '—Ç—ã—Å/–º–∫–ª',
          referenceMin: 4.0,
          referenceMax: 9.0,
          isNormal: false
        },
        {
          name: '–ù–µ–π—Ç—Ä–æ—Ñ–∏–ª—ã (—Å–µ–≥–º–µ–Ω—Ç–æ—è–¥–µ—Ä–Ω—ã–µ)',
          value: 78, // –ü–û–í–´–®–ï–ù–´
          unit: '%',
          referenceMin: 47,
          referenceMax: 72,
          isNormal: false
        },
        {
          name: '–õ–∏–º—Ñ–æ—Ü–∏—Ç—ã',
          value: 15, // –ü–û–ù–ò–ñ–ï–ù–´
          unit: '%',
          referenceMin: 19,
          referenceMax: 37,
          isNormal: false
        },
        {
          name: '–ú–æ–Ω–æ—Ü–∏—Ç—ã',
          value: 7,
          unit: '%',
          referenceMin: 3,
          referenceMax: 11,
          isNormal: true
        },
        {
          name: '–≠–æ–∑–∏–Ω–æ—Ñ–∏–ª—ã',
          value: 2,
          unit: '%',
          referenceMin: 0.5,
          referenceMax: 5,
          isNormal: true
        },
        {
          name: '–ë–∞–∑–æ—Ñ–∏–ª—ã',
          value: 1,
          unit: '%',
          referenceMin: 0,
          referenceMax: 1,
          isNormal: true
        },
        {
          name: '–¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã (PLT)',
          value: 280,
          unit: '—Ç—ã—Å/–º–∫–ª',
          referenceMin: 150,
          referenceMax: 400,
          isNormal: true
        },
        {
          name: '–°–û–≠',
          value: 22, // –ü–û–í–´–®–ï–ù–ê
          unit: '–º–º/—á',
          referenceMin: 0,
          referenceMax: 15,
          isNormal: false
        },
        {
          name: '–ì–ª—é–∫–æ–∑–∞',
          value: 6.2, // –ü–û–í–´–®–ï–ù–ê
          unit: '–º–º–æ–ª—å/–ª',
          referenceMin: 3.3,
          referenceMax: 5.5,
          isNormal: false
        },
        {
          name: '–û–±—â–∏–π –±–µ–ª–æ–∫',
          value: 72,
          unit: '–≥/–ª',
          referenceMin: 64,
          referenceMax: 83,
          isNormal: true
        }
      ] : [
        // –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ
        {
          name: '–ì–µ–º–æ–≥–ª–æ–±–∏–Ω (HGB)',
          value: 145,
          unit: '–≥/–ª',
          referenceMin: 120,
          referenceMax: 160,
          isNormal: true
        },
        {
          name: '–≠—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã (RBC)',
          value: 4.5,
          unit: '–º–ª–Ω/–º–∫–ª',
          referenceMin: 4.0,
          referenceMax: 5.5,
          isNormal: true
        },
        {
          name: '–ì–µ–º–∞—Ç–æ–∫—Ä–∏—Ç (HCT)',
          value: 42,
          unit: '%',
          referenceMin: 36,
          referenceMax: 48,
          isNormal: true
        },
        {
          name: '–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º —ç—Ä–∏—Ç—Ä–æ—Ü–∏—Ç–∞ (MCV)',
          value: 88,
          unit: '—Ñ–ª',
          referenceMin: 80,
          referenceMax: 100,
          isNormal: true
        },
        {
          name: '–°—Ä–µ–¥–Ω–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ Hb (MCH)',
          value: 30,
          unit: '–ø–≥',
          referenceMin: 27,
          referenceMax: 34,
          isNormal: true
        },
        {
          name: '–õ–µ–π–∫–æ—Ü–∏—Ç—ã (WBC)',
          value: 6.2,
          unit: '—Ç—ã—Å/–º–∫–ª',
          referenceMin: 4.0,
          referenceMax: 9.0,
          isNormal: true
        },
        {
          name: '–ù–µ–π—Ç—Ä–æ—Ñ–∏–ª—ã (—Å–µ–≥–º–µ–Ω—Ç–æ—è–¥–µ—Ä–Ω—ã–µ)',
          value: 58,
          unit: '%',
          referenceMin: 47,
          referenceMax: 72,
          isNormal: true
        },
        {
          name: '–õ–∏–º—Ñ–æ—Ü–∏—Ç—ã',
          value: 32,
          unit: '%',
          referenceMin: 19,
          referenceMax: 37,
          isNormal: true
        },
        {
          name: '–ú–æ–Ω–æ—Ü–∏—Ç—ã',
          value: 7,
          unit: '%',
          referenceMin: 3,
          referenceMax: 11,
          isNormal: true
        },
        {
          name: '–≠–æ–∑–∏–Ω–æ—Ñ–∏–ª—ã',
          value: 2,
          unit: '%',
          referenceMin: 0.5,
          referenceMax: 5,
          isNormal: true
        },
        {
          name: '–ë–∞–∑–æ—Ñ–∏–ª—ã',
          value: 1,
          unit: '%',
          referenceMin: 0,
          referenceMax: 1,
          isNormal: true
        },
        {
          name: '–¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã (PLT)',
          value: 280,
          unit: '—Ç—ã—Å/–º–∫–ª',
          referenceMin: 150,
          referenceMax: 400,
          isNormal: true
        },
        {
          name: '–°–û–≠',
          value: 8,
          unit: '–º–º/—á',
          referenceMin: 0,
          referenceMax: 15,
          isNormal: true
        },
        {
          name: '–ì–ª—é–∫–æ–∑–∞',
          value: 4.8,
          unit: '–º–º–æ–ª—å/–ª',
          referenceMin: 3.3,
          referenceMax: 5.5,
          isNormal: true
        },
        {
          name: '–û–±—â–∏–π –±–µ–ª–æ–∫',
          value: 72,
          unit: '–≥/–ª',
          referenceMin: 64,
          referenceMax: 83,
          isNormal: true
        }
      ]
    }

    await prisma.document.update({ where: { id: documentId }, data: mockData })
    console.log(`[OCR] Processing completed for document ${documentId}`)
    
    /* –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Cloud Vision:
    
    const vision = require('@google-cloud/vision')
    const client = new vision.ImageAnnotatorClient({
      keyFilename: process.env.GOOGLE_APPLICATION_CREDENTIALS
    })
    
    const [result] = await client.textDetection(document.fileUrl)
    const text = result.fullTextAnnotation?.text || ''
    
    const { parseMedicalData } = await import('@/lib/ocr')
    const medicalData = parseMedicalData(text)
    
    documentsDb.update(documentId, {
      rawText: text,
      ocrConfidence: 0.95,
      ...medicalData,
      parsed: true
    })
    */
    
  } catch (error) {
    console.error(`[OCR] Error processing document ${documentId}:`, error)
    await prisma.document.update({ where: { id: documentId }, data: { parsed: false, ocrConfidence: 0 } })
  }
}

